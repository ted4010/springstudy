<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.myapp.mapper.BbsMapper">

  <!-- BbsDto 의 구조를 이용해 BbsMap 을 만들어서 resultType 대신 resultMap 으로 사용 -->
  <resultMap type="BbsDto" id="BbsMap">
    <id     property="bbsNo"      column="BBS_NO"/>
    <result property="contents"   column="CONTENTS"/>
    <result property="createDt"   column="CREATE_DT"/>
    <result property="state"      column="STATE"/>
    <result property="depth"      column="DEPTH"/>
    <result property="groupNo"    column="GROUP_NO"/>
    <result property="groupOrder" column="GROUP_ORDER"/>
    <association property="user"  javaType="UserDto">
      <id     property="userNo" column="USER_NO"/>
      <result property="email"  column="EMAIL"/>
    </association>
  </resultMap>

  <!-- 원글 삽입 -->
  <insert id="insertBbs"
          parameterType="BbsDto">
    INSERT INTO BBS_T (
        BBS_NO
      , CONTENTS
      , USER_NO
      , CREATE_DT
      , STATE
      , DEPTH
      , GROUP_NO
      , GROUP_ORDER
    ) VALUES (
        BBS_SEQ.NEXTVAL
      , #{contents}
      , #{user.userNo}
      , CURRENT_DATE
      , 1
      , 0
      , BBS_SEQ.CURRVAL
      , 0
    )
  </insert>

  <!-- 전체 BBS 게시글 수 -->
  <select id="getBbsCount"
          resultType="int">
    SELECT COUNT(*)
      FROM BBS_T
  </select>
  
  <!-- BBS 게시글 목록 -->
  <select id="getBbsList"
          parameterType="Map"
          resultMap="BbsMap">
    SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, U.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
              FROM USER_T U INNER JOIN BBS_T B
                ON U.USER_NO = B.USER_NO)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 답글 삽입 전 기존 답글들의 GROUP_ORDER 업데이트 -->
  <update id="updateGroupOrder"
          parameterType="BbsDto">  <!-- BbsDto 는 원글을 의미함 -->
    UPDATE BBS_T
       SET GROUP_ORDER = GROUP_ORDER + 1
     WHERE GROUP_NO = #{groupNo}
       AND GROUP_ORDER > #{groupOrder}
  </update>
  
  <!-- 답글 삽입 -->
  <insert id="insertReply"
          parameterType="BbsDto">  <!-- BbsDto 는 답글을 의미함 -->
    INSERT INTO BBS_T (
        BBS_NO
      , CONTENTS
      , USER_NO
      , CREATE_DT
      , STATE
      , DEPTH
      , GROUP_NO
      , GROUP_ORDER
    ) VALUES (
        BBS_SEQ.NEXTVAL
      , #{contents}
      , #{user.userNo}
      , CURRENT_DATE
      , 1
      , #{depth}
      , #{groupNo}
      , #{groupOrder}
    )
  </insert>
  
  <!-- BBS 게시글 삭제 (실제로는 state = 0 으로 업데이트) -->
  <update id="removeBbs">
    UPDATE BBS_T
       SET STATE = 0
     WHERE BBS_NO = #{bbsNo}
  </update>
  
  <!-- 검색 결과 개수 -->
  <select id="getSearchCount"
          parameterType="Map"
          resultType="int">
    SELECT COUNT(*)
      FROM USER_T U INNER JOIN BBS_T B
        ON U.USER_NO = B.USER_NO
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  
  <!-- 검색 결과 목록 -->
  <select id="getSearchList"
          parameterType="Map"
          resultMap="BbsMap">          
    SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, U.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
              FROM USER_T U INNER JOIN BBS_T B
                ON U.USER_NO = B.USER_NO
             WHERE ${column} LIKE CONCAT(CONCAT('%', #{query}), '%'))
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>

</mapper>